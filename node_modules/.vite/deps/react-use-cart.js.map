{
  "version": 3,
  "sources": ["../../react-use-cart/src/useLocalStorage.ts", "../../react-use-cart/src/index.tsx"],
  "sourcesContent": ["import * as React from \"react\";\n\nexport default function useLocalStorage(\n  key: string,\n  initialValue: string\n): [string, (value: Function | string) => void] {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const item =\n        typeof window !== \"undefined\" && window.localStorage.getItem(key);\n\n      return item ? item : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: Function | string) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n\n      setStoredValue(valueToStore);\n\n      window.localStorage.setItem(key, valueToStore);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n", "import * as React from \"react\";\n\nimport useLocalStorage from \"./useLocalStorage\";\n\nexport interface Item {\n  id: string;\n  price: number;\n  quantity?: number;\n  itemTotal?: number;\n  [key: string]: any;\n}\n\ninterface InitialState {\n  id: string;\n  items: Item[];\n  isEmpty: boolean;\n  totalItems: number;\n  totalUniqueItems: number;\n  cartTotal: number;\n  metadata?: Metadata;\n}\n\nexport interface Metadata {\n  [key: string]: any;\n}\n\ninterface CartProviderState extends InitialState {\n  addItem: (item: Item, quantity?: number) => void;\n  removeItem: (id: Item[\"id\"]) => void;\n  updateItem: (id: Item[\"id\"], payload: object) => void;\n  setItems: (items: Item[]) => void;\n  updateItemQuantity: (id: Item[\"id\"], quantity: number) => void;\n  emptyCart: () => void;\n  getItem: (id: Item[\"id\"]) => any | undefined;\n  inCart: (id: Item[\"id\"]) => boolean;\n  clearCartMetadata: () => void;\n  setCartMetadata: (metadata: Metadata) => void;\n  updateCartMetadata: (metadata: Metadata) => void;\n}\n\nexport type Actions =\n  | { type: \"SET_ITEMS\"; payload: Item[] }\n  | { type: \"ADD_ITEM\"; payload: Item }\n  | { type: \"REMOVE_ITEM\"; id: Item[\"id\"] }\n  | {\n      type: \"UPDATE_ITEM\";\n      id: Item[\"id\"];\n      payload: object;\n    }\n  | { type: \"EMPTY_CART\" }\n  | { type: \"CLEAR_CART_META\" }\n  | { type: \"SET_CART_META\"; payload: Metadata }\n  | { type: \"UPDATE_CART_META\"; payload: Metadata };\n\nexport const initialState: any = {\n  items: [],\n  isEmpty: true,\n  totalItems: 0,\n  totalUniqueItems: 0,\n  cartTotal: 0,\n  metadata: {},\n};\n\nconst CartContext = React.createContext<CartProviderState | undefined>(\n  initialState\n);\n\nexport const createCartIdentifier = (len = 12) =>\n  [...Array(len)].map(() => (~~(Math.random() * 36)).toString(36)).join(\"\");\n\nexport const useCart = () => {\n  const context = React.useContext(CartContext);\n\n  if (!context) throw new Error(\"Expected to be wrapped in a CartProvider\");\n\n  return context;\n};\n\nfunction reducer(state: CartProviderState, action: Actions) {\n  switch (action.type) {\n    case \"SET_ITEMS\":\n      return generateCartState(state, action.payload);\n\n    case \"ADD_ITEM\": {\n      const items = [...state.items, action.payload];\n\n      return generateCartState(state, items);\n    }\n\n    case \"UPDATE_ITEM\": {\n      const items = state.items.map((item: Item) => {\n        if (item.id !== action.id) return item;\n\n        return {\n          ...item,\n          ...action.payload,\n        };\n      });\n\n      return generateCartState(state, items);\n    }\n\n    case \"REMOVE_ITEM\": {\n      const items = state.items.filter((i: Item) => i.id !== action.id);\n\n      return generateCartState(state, items);\n    }\n\n    case \"EMPTY_CART\":\n      return initialState;\n\n    case \"CLEAR_CART_META\":\n      return {\n        ...state,\n        metadata: {},\n      };\n\n    case \"SET_CART_META\":\n      return {\n        ...state,\n        metadata: {\n          ...action.payload,\n        },\n      };\n\n    case \"UPDATE_CART_META\":\n      return {\n        ...state,\n        metadata: {\n          ...state.metadata,\n          ...action.payload,\n        },\n      };\n\n    default:\n      throw new Error(\"No action specified\");\n  }\n}\n\nconst generateCartState = (state = initialState, items: Item[]) => {\n  const totalUniqueItems = calculateUniqueItems(items);\n  const isEmpty = totalUniqueItems === 0;\n\n  return {\n    ...initialState,\n    ...state,\n    items: calculateItemTotals(items),\n    totalItems: calculateTotalItems(items),\n    totalUniqueItems,\n    cartTotal: calculateTotal(items),\n    isEmpty,\n  };\n};\n\nconst calculateItemTotals = (items: Item[]) =>\n  items.map(item => ({\n    ...item,\n    itemTotal: item.price * item.quantity!,\n  }));\n\nconst calculateTotal = (items: Item[]) =>\n  items.reduce((total, item) => total + item.quantity! * item.price, 0);\n\nconst calculateTotalItems = (items: Item[]) =>\n  items.reduce((sum, item) => sum + item.quantity!, 0);\n\nconst calculateUniqueItems = (items: Item[]) => items.length;\n\nexport const CartProvider: React.FC<{\n  children?: React.ReactNode;\n  id?: string;\n  defaultItems?: Item[];\n  onSetItems?: (items: Item[]) => void;\n  onItemAdd?: (payload: Item) => void;\n  onItemUpdate?: (payload: object) => void;\n  onItemRemove?: (id: Item[\"id\"]) => void;\n  storage?: (\n    key: string,\n    initialValue: string\n  ) => [string, (value: Function | string) => void];\n  metadata?: Metadata;\n}> = ({\n  children,\n  id: cartId,\n  defaultItems = [],\n  onSetItems,\n  onItemAdd,\n  onItemUpdate,\n  onItemRemove,\n  storage = useLocalStorage,\n  metadata,\n}) => {\n  const id = cartId ? cartId : createCartIdentifier();\n\n  const [savedCart, saveCart] = storage(\n    cartId ? `react-use-cart-${id}` : `react-use-cart`,\n    JSON.stringify({\n      id,\n      ...initialState,\n      items: defaultItems,\n      metadata,\n    })\n  );\n\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(savedCart));\n  React.useEffect(() => {\n    saveCart(JSON.stringify(state));\n  }, [state, saveCart]);\n\n  const setItems = (items: Item[]) => {\n    dispatch({\n      type: \"SET_ITEMS\",\n      payload: items.map(item => ({\n        ...item,\n        quantity: item.quantity || 1,\n      })),\n    });\n\n    onSetItems && onSetItems(items);\n  };\n\n  const addItem = (item: Item, quantity = 1) => {\n    if (!item.id) throw new Error(\"You must provide an `id` for items\");\n    if (quantity <= 0) return;\n\n    const currentItem = state.items.find((i: Item) => i.id === item.id);\n\n    if (!currentItem && !item.hasOwnProperty(\"price\"))\n      throw new Error(\"You must pass a `price` for new items\");\n\n    if (!currentItem) {\n      const payload = { ...item, quantity };\n\n      dispatch({ type: \"ADD_ITEM\", payload });\n\n      onItemAdd && onItemAdd(payload);\n\n      return;\n    }\n\n    const payload = { ...item, quantity: currentItem.quantity + quantity };\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id: item.id,\n      payload,\n    });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const updateItem = (id: Item[\"id\"], payload: object) => {\n    if (!id || !payload) {\n      return;\n    }\n\n    dispatch({ type: \"UPDATE_ITEM\", id, payload });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const updateItemQuantity = (id: Item[\"id\"], quantity: number) => {\n    if (quantity <= 0) {\n      onItemRemove && onItemRemove(id);\n\n      dispatch({ type: \"REMOVE_ITEM\", id });\n\n      return;\n    }\n\n    const currentItem = state.items.find((item: Item) => item.id === id);\n\n    if (!currentItem) throw new Error(\"No such item to update\");\n\n    const payload = { ...currentItem, quantity };\n\n    dispatch({\n      type: \"UPDATE_ITEM\",\n      id,\n      payload,\n    });\n\n    onItemUpdate && onItemUpdate(payload);\n  };\n\n  const removeItem = (id: Item[\"id\"]) => {\n    if (!id) return;\n\n    dispatch({ type: \"REMOVE_ITEM\", id });\n\n    onItemRemove && onItemRemove(id);\n  };\n\n  const emptyCart = () =>\n    dispatch({\n      type: \"EMPTY_CART\",\n    });\n\n  const getItem = (id: Item[\"id\"]) =>\n    state.items.find((i: Item) => i.id === id);\n\n  const inCart = (id: Item[\"id\"]) => state.items.some((i: Item) => i.id === id);\n\n  const clearCartMetadata = () => {\n    dispatch({\n      type: \"CLEAR_CART_META\",\n    });\n  };\n\n  const setCartMetadata = (metadata: Metadata) => {\n    if (!metadata) return;\n\n    dispatch({\n      type: \"SET_CART_META\",\n      payload: metadata,\n    });\n  };\n\n  const updateCartMetadata = (metadata: Metadata) => {\n    if (!metadata) return;\n\n    dispatch({\n      type: \"UPDATE_CART_META\",\n      payload: metadata,\n    });\n  };\n\n  return (\n    <CartContext.Provider\n      value={{\n        ...state,\n        getItem,\n        inCart,\n        setItems,\n        addItem,\n        updateItem,\n        updateItemQuantity,\n        removeItem,\n        emptyCart,\n        clearCartMetadata,\n        setCartMetadata,\n        updateCartMetadata,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n};\n"],
  "mappings": "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",
  "names": ["useLocalStorage", "key", "initialValue", "React", "item", "window", "localStorage", "getItem", "error", "storedValue", "setStoredValue", "setValue", "value", "valueToStore", "Function", "setItem", "console", "log", "initialState", "items", "isEmpty", "totalItems", "totalUniqueItems", "cartTotal", "metadata", "CartContext", "createCartIdentifier", "len", "Array", "map", "Math", "random", "toString", "join", "useCart", "context", "Error", "reducer", "state", "action", "type", "generateCartState", "payload", "id", "filter", "i", "calculateUniqueItems", "calculateItemTotals", "calculateTotalItems", "calculateTotal", "itemTotal", "price", "quantity", "reduce", "total", "sum", "length", "CartProvider", "children", "cartId", "defaultItems", "onSetItems", "onItemAdd", "onItemUpdate", "onItemRemove", "storage", "JSON", "stringify", "savedCart", "saveCart", "parse", "dispatch", "setItems", "addItem", "currentItem", "find", "hasOwnProperty", "updateItem", "updateItemQuantity", "removeItem", "emptyCart", "inCart", "some", "clearCartMetadata", "setCartMetadata", "updateCartMetadata", "Provider"]
}
